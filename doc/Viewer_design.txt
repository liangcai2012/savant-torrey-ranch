
======================General requirements======================
*Viewer is client for streamer/feeder to get real-time/historical stock data and display, and server for controller(only receive command).

*Viewer component is responsible for displaying BOTH historical AND real-time data in different charts, and integrate message Q to maintain a queue of display items.

*Message Q should be manual modifiable, include move/remove/list

*For each stock, viewer should be able to display multiple data in same plot, include bar data,MA,vol,etc.


=======================function definition=======================
*feature#1:
Viewer should support  display multiple charts for each stock inside one figure, like:
 	line:  MA(moving average) with different interval,bar data(o/h/l/c)
	Histogram: vol
	

*feature#2:
Viewer should be able to both separetely or  "combinely" display each stock's historical data and real-time data, cases include(order as priority):
	a) ONLY show realtime data: first plot point will begin with Viewer get first real-time data from Streamer. Interval decide data requesting frequency, except MA(see detail later)
	b) ONLY show ONE DAY's historical data: start/stop/interval time specified on command, Viewer get data from Fetcher, and show the whole data at once. Interval only decide points on plot, not data requesting frequency.
!		follow-up: historical data also update frequently(could be very quick) using 'update' command, check time stamp to judge if there is valid data
(in future version)
	d) show historical data crossing multiple datas: start/stop time specified on command, Viewer get data from Fetcher, and show the whole data at once. interval 
	c) show today's "combine" data: first load today's 'historical' data getting from Fether, then keep updating real-time data getting from Streamer. Kind of chart should be the same.

*feature#3:
Message Q should be manual modifiable, include add/move/remove/list

!	MQ could keep limite size like 100, new command will push to Q's head(Q always read head). plot1 always show Q'head(defaul)
	Suggest: because we use dict of dict to store all stock data, we can skip using a real queue to connect dict and plot, instead, using OrderedDict as outside dict of data container, and direct operate this OrderedDict. 
	for convinient, we can create a 'plotDict'(see detail in 'Main Data structure') to record each plot's on plotting stock name. This Dict will be used to check if need replot any plots# during plotting.
	some examples:
	a) 'add': display the head of Q(OrderedDict) in plot#1. ('add' default as 'add1')
	b) 'add3':display the head of Q(OrderedDict) in plot#3.
	c) 'list': list all 'key' value in OrderedDict 
	d) 'remove': remove iteam in OrderedDict using 'del', when remove on-ploting stock, next stock will auto to fill the plot
	e)  'move': display the Mst element in Q in plot#N
	f) for any MQ operation, need update the value in 'plotDict'
	
*feture#4:
Viewer can display n small charts or m big charts. Layout&configr ways:
	option: fixed layout& configr. Each chart will divide by up and down part: upper part will be bar and MA (depending on commands) lower part will be volume.  
	(in future version may configurable)


*feture#5: (no need this for this version)
Viewer support both backtest and auto trading result displaying. each chart disp one  stock based on order. 
Viewer works in sessions. When bt engine finishes a strategy, or when auto trading is started, The old session (if any) is closed and a new session is automatically created. The Viewer process is terminated when session is closed and a new process is spawned for the new session. User can restart viewer session from console. 
In each session, viewer mainatins a queue of display items. When bt is finished, the queue is populated with the execution results; When the auto trade is started, the queue is populated with all streamed stocks in the list. The order of the queue will be dynamically adjusted. 

 	follow-up about session:
	pros: good for multi-client, server can store muli-client's information(like MQ) in different session. clients can have high-costumed request from server 
	cons: 	1)session mainly used in web. As server to Controller, viewer don't benefit from session because normally only have one controller. As client to streammer/feeder, original design of sigle session(close old one after new one created) do not benefit too much.
		2) need 3rd party framework, like "flask" in Python, and most framwork is face to web
 	some concern: if we multi-sessions(properly won't), need consider multi-thread and multi-session relative issue. 
		      when viewer used as client session, like request 2 streamers in LAN at same time, how to handle(one time one session or multi session?)  




=======================block definition=========================


0. Main class:
class: Viewer(rpyc.Service):  use rpyc to communicate with controller, controller directly call below function with Json command as parameter
def: 
	init():
		call Recvdata.Connect_streamer and Recvdata.Connect_historic to create connection
		init dict of dict to store stock data, and plotDict
		call Plotdata.on_launch to init all plot using fixed configur
	
	Connect_controller(): 
		connect to controller and wait for any command->
		dump command and call below functions to proceed it	
		 
	list():
		list all key value in data storing dict 

	remove(stock):
		remove specified key-pair in data storing dict->
		if the removed stock is on plotting->
		need also call move() to move next up-shown stock to current plot position. 

	move(stock,position):
		display specified data in dict in specified plot->
		update 'plotDict'		

	add_real(stock,position):
		display head data in dict in plot#1 (default) or specified plot->
		call Recvdata.Subscrib to subscribe new stock from streamer and append new stock in dict, and update plotDict
		need to call move() to replace on plotting plot
		
	update_streamer(command):
		call Recvdata.streaming to update all stock from streamer->
		update'plotDict'

	unsubscrb_streamer():
		call Recvdata.Unsubscrib to unsubsrib all stock, close socket, remove all temp memory->
		update'plotDict'

	add_hist(stock,position):
		similar as real time data case, but update 'plotDict_hist'
	update_historic(command): similar as real time data case,  but update 'plotDict_hist'
	unsubscrb_historic(): similar as real time data case, but update 'plotDict_hist'

	############pseudo code:  ############
	init():
		globle y_data{}{}
	        globle xdata{}
		globle plotDict{}
		self.update_command{}    #used to store udpate_command, in case need call update() after changed plotDict causing current streaming looop terminated
		self.update_command_hist{}
		
		Recvdata.Connect_streamer(ipAddr)
		Recvdata.Connect_historic(ipAddr)
		Plotdata.on_launch(plotConf_default) 
		Connect_controller()
		
	Connect_controller()	
		self.socket_contr = socket.socket()      
     		port = 8090           
     		s.bind(("ipAddr", port))        # Bind to the port for controller
     		s.listen()
     		
     		while True:
     			client, addr = s.accept()
            		ready = select.select([client,],[], [],2)  #wait for I/O complete
            		if ready[0]:
                 		recv_data = client.recv(1024*24)
                 		command=loads(recv_data)
                 		
                 		if command['cmd']=='list':
                 			list()
		                elif command['cmd']=='remove':
		                	stock=command['stock']
					remove(stock)
	                        elif command['cmd']=='move':
		                        stock=command['stock']
		                        position=command['position']
					move(stock,position)
				elif command['cmd']=='add_real':
	                                stock=command['stock']
	                                position=command['position']
					add(stock,position)
				elif command['cmd']=='update_real':
					self.update_command=command
					update_streamer(self.update_command)
				elif command['cmd']=='unsubscrb_real':
					unsubscrb_streamer():
					
				elif command['cmd']=='add_hist':
					stock=command['stock']
	                                position=command['position']
					add_hist(stock,position)
				elif command['cmd']=='update_hist':
					self.update_command_hist{}=command
					update_historic(self.update_command_hist)
				elif command['cmd']=='unsubscrb_hist':
					unsubscrb_historic():
				else: unvalid command; continue
			
			
	add_real(stock,position):
		Subscrib_streamer(stock,position)					
		position=1 if no position
		move(stock,position)
						
	update_streamer(command):
		update_command=command
		Recvdata.streaming(interval,bar,ma,plotDict)				
					
	unsubscrb_streamer():
		y_data={}{}
		plotDict={}
	
	list():	 				
		print i for i in y_data{}
		print j for j in plotDict{}
	
	move(stock,position):	
	        plotDict[position]=stock
	        update_streamer(update_command,plotDict)  # issue: need make sure re-call update() after previous update() loop finish
	

						
					
1.real-time data requestor:
request real-time data from streamer. Will send request every interval. Store temp data(1 hour or WHOLE day) in memory and display.
when requesting bar data only, caller should send this message with the same interval as the bar interval. 


class:
 	Recvdata(Thread)
defs: 
	Connect_streamer(ipAddr):
		connect streamer based on ipAddr->
		create socket instance(globle)
	
	
	Subscrib_streamer(Command):
		send Subscrib command to streamer through socket-> 
		wait for response -> 
		add key in dict of stock data->
		update'plotDict'
	
	streaming(interval,bar,ma,plotDict,plotDict):
		decide request frequency based on 'interval', and check if there is plot order change based on 'plotDict' -> 
		'while' loop + time() to controll updating ->
			inside each loop: sent 'update' command to streamer -> 
					  receive data -> 
					  process and analys received data,check'time_stamp' to see if it's not same as last data. If it is, re-send update command -> 
					  append different kind of data according dict key's, eg: stock_name(outside dict key), time_stamp(inside dict key), MA5(inside dict key),open(inside dict key)... -> 
					  if there is any 'plotDict' changed,like change stock plotting in plot#1, will call Plotdata.on_launch() to reset relative plot
					  call Plotdata.on_running(dict) for real-time plotting on EACH plots->
 			
	issue: what if streamming is on-runing, we entry another new 'update' command to call a new streamming command(like change the interval)?
		option: in the 'plotDict', add a 'interval' key to record if there is interval change, if there is, break current streaming runing

	############pseudo code:  ############
	Recvdata(Thread):  
		self.socket
		
	
	Connect_streamer(ipAddr):
		self.socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)       
                socket.connect((ipAddr,8091))
               
        
        
	Subscrib_streamer(stock,position):
		subscrb_command= create_command_toStreamer(subscrib,stock)
		self.socket.send(subscrb_command)
		response = self.socket.recv(1024*10)
		stock_new=new_added(stocklist, subscrb_command['stocklist'] )  
		if stock_new:
			self.ydata[].append(stock_new)
			plotDict['position']=stock_new; 
			plotDict['change']=1
		

	streaming(interval,bar,ma,plotDict):	
		update_command=create_command_toStreamer(update,interval,bar,ma)
		interval_new=update_command{'interval'}
		interval= maxCommonDiv(interval_new,interval)
		
		Bar_new=update_command('bar')
		Bar=Bar_new
		MA_new=update_command('ma')
		MA=MA_new
		MA_rate=MA/interval
		
		plotDict['interval','bar','ma']=interval_new,Bar, MA
		
		if plotDict!=plotDict_new:
			Plotdata.on_launch(plotDict)	# on_launch will only reset specified sub-plot
		        plotDict_new=plotDict            # issue: plotDict detail during streaming
		
		next_call = time.time() 
        	while not self.stopped.wait(next_call - time.time()):  #timer compensate

			if plotDict!=plotDict_new:     # exit current function, and re-call it(in case change bar data's interval)
				break
				
	    		self.socket.send(self.input_update)
	    		
	   		data = self.socket.recv(1024*10)
			data_plot=dumps(data)      # 2D dict

			while data_plot[]['timestamp'] unchanged:    # issue: what if only 1 stock time stamp unchanged, we need re-send update to ALL stocks?
				self.socket.send(self.input_update)
				data = self.socket.recv(1024*10)
			        data_plot=dumps(data) 
			        
			self.ydata[]['bar'].append(data_plot[]['bar'])
			self.ydata[]['timestamp'].append(data_plot[]['timestamp'])
			
		        if MA_new ==interval:         			 # MA wil update as frequence as MA's interval
				self.ydata[]['ma'].append(data_plot[]['ma'])
				MA_new=MA_new/MA_rate
			else:
				MA_new=+MA_new
			
			self.xdata.append(interval)  	#issue: how to disply x data based on differetn interval on plot
			
			Plotdata.on_running(self.xdata, self.ydata)
			
			next_call = next_call+interval  #timer=interval



2. same day 'historical' data requestor:
work in same thread with 'real-time data requestor'.  get same day previous data from Fetcher

class: Recvdata
defs: 
	connect_hist(ipAddr):
		connect streamer based on ipAddr->
		create socket instance(globle)->
		call Plotdata.on_launch() to init 2-6 plots for historical

	Subscrib_hist(Command): same as 'Subscrib_streamer', we can seperately maintain a ''
	update_hist(command,plotDict_hist): same with streaming, but not need check 'interval' and only check 'plotDict' outside the loop; just loop every 0.001s, and check if each data's time-stamp is valid



3. historical data requestor:
work in different thread with 'real-time data requestor'. request historical data from Fetcher 

class: Recvdata
defs: 
	connect_hist(ipAddr): same as above
	Subscrib_hist(Command): same as above
	update_hist(command,plotDict_hist): same as above


4. plotter:
work in differnt thread with data requestor.  if called by historical requestor, plot all data in one time, if called by real-time data requestor, keep updating every 1s. 
Plotter should be support all kinds of data plotting. See feature#1 and #4

class: Plotdata
defs: 
	on_launch(plotDict):
		setup each plot's layout, and config which plot display which stock
	
	on_running(dict):
		real-time update all the plot based on the stock data from 'dict'

	
	config_plot()  (TBD, will implement in next version)

	############pseudo code:  ############
	on_launch(plotDict):
        	self.figure, self.axarr = plt.subplots(6,sharex=True)       #Set up plot
        	self.lines0[1-14] = self.axarr[0].plot([],[])  # bar/MA/Vol, total 14 max overlap
        	self.lines1[1-14] = self.axarr[1].plot([],[])
        	self.lines2[1-14] = self.axarr[2].plot([],[])
        	self.lines3[1-14] = self.axarr[3].plot([],[])
        	self.lines4[1-14] = self.axarr[4].plot([],[])
        	self.lines5[1-14] = self.axarr[5].plot([],[])
        	
        	self.axarr[:].set_autoscaley_on(True)      # set auto-scale(temp)
        	self.axarr[:].set_xlim(0, plotDict['interval']*2000)  # set x limit.   issue: interval only changed during update(), which apply to ALL stock, what if we want seperately?		
        	self.axarr[:].grid()
        		
	        to-do: default set up each sub-plot display all MA+BAR+val

	 on_running(self, xdata, ydata):
	 	self.lines0[1-14].set_xdata(xdata[])     
	 	#set plot1's ydata
	        self.lines0[1].set_ydata(ydata[0]['open']) 
		self.lines0[2].set_ydata(ydata[0]['high'])
		self.lines0[3].set_ydata(ydata[0]['low'])
		self.lines0[4].set_ydata(ydata[0]['close'])
		self.lines0[5].set_ydata(ydata[0]['MA1'])
		self.lines0[6].set_ydata(ydata[0]['MA5'])
		self.lines0[7].set_ydata(ydata[0]['MA10'])
		self.lines0[8].set_ydata(ydata[0]['MA30'])
		self.lines0[9].set_ydata(ydata[0]['MA1m'])
		self.lines0[10].set_ydata(ydata[0]['MA5m'])
		self.lines0[11].set_ydata(ydata[0]['MA10m'])
		self.lines0[12].set_ydata(ydata[0]['MA30m'])
		self.lines0[13].set_ydata(ydata[0]['MA1h'])
		self.lines0[14].set_ydata(ydata[0]['vol'])
		
		repeat same with self.line1-6
		
		self.axarr[:].relim()
		self.axarr[:].autoscale_view()
		
		self.figure.canvas.draw()
	 	self.figure.canvas.flush_events()
	 	
		
! Thread deinition:
 	thread1: connect and request real-time/same day historical data
	thread2: connect and request pure historical. (Requested historical data may huge and seperate store from real-time data, so use diff thread with realtime data requester)
 	thread3: plotting
 	thread4: main thread, MQ operation, ForController,Misc.

	follow-up: may not need so many thread, we can integrate data recv and plot into on thread

! Main Data structure definistion:
	MQ: use dequeue
	real-time plotting data: use dict of dict. global,share between threadings
			outter dict:  key: stock_name, value: data
			inner dict: key: data(bar/MA), value: data value. eg: {"QQQ": {"time_stamp":"12:22:45","open": 110,"high":113,"MA1":"112","vol":20000}, "SPY": {"time_stamp":"12:22:45","open": 105,"avg":100,"MA":"102","vol":30000}}
	
	Historical data: similar as real-time data.global,share between threadings


! block relations:
 	general: begin -> MQ -> Recvdata->Plotdata
	change MQ: MQ->plotdata	(all stock in MQ always keep updating)
	change plot config:  plotdata  ( need figure out how to change config in middle of realtime data plotting)

	"combine" plot -> Recvdata(from feeder)->plotdata   -> Recvdata(from streammer)->plotdata  (need figure out the 'combine' plotting implementation)
	

=========================APIs====================================

### with controller ###:

! 1.add symbols:
{ 
 "requst": {
	"mod":"view",
	"cmd":"add",
	"symlist": [
            "QQQ",
            "SPY"
        ]
	"interval":interval
	"type": "real" or "hist"
	"start":y/m/d/h/m/s or "today" 
	"stop":y/m/d/h/m/s or "today"
	}
}
NOTE:
a) when 'type' is 'real',request real-time data from streammer;when 'type' is 'hist',request historical data from feeder
b) 'start'/'stop' only take effect when 'type' is 'hist', and they will specify the start/stop time of the historical data requested. when they're 'today',means will request today's historical data from beginning of today to current time.
c) when 'type' is 'real',interval must inside ["1s", "5s", "10s", "30s", "1m", "5m", "10m", "30m", "1h"], and when 'type' is 'hist',interval can have additional option '1d'



2.list message Q inside viewer
{ 
 "requst": {
	"mod":"view",
	"cmd":"list"
	}
}

3. move chart_id's position inside messageQ:
{ 
 "requst": {
	"mod":"view",
	"cmd":"move",
	"id":index,
	"position":position
	}
}

NOTE: will cause 4 cases which need by handle by Viewer: 
a) both chart_ids not in plot ->  just swap their positions in Q,no other operate needed
b) one chart in real-time plotting, another isn't -> swap chart_ids in Q, replace plot with new stock,may need get 'same day historical' data
c) one chart in historical data plot, another isn't -> swap chart_ids in Q, call feeder get new historical data and update plottings. 
d) both chart in ploting -> just swap plotting position(1-6). DO we really need this case?


4. remove chart_id in Q:
{
 "requst": {
	"mod":"view",
	"cmd":"remove",
	"id":index
	}
}

NOTE: once a chart_ids removed from Q, both relative memory and file removed.  two cases need handle:
a)removed chart_ids is NOT on ploting, delete chart_id from Q, delete relative memory and temp file(if used)
b)removed chart_ids is on ploting, next unshow chart_id fill this position.


5. status response to controller:
{
    "response":{
       "errcode":0
    }
}
or
{
    "response":{
       "errcode": "-1",
       "errmsg": "xxxxx"
    }
}


### With streamer ###

6. subscribe new symlist from streamer:

{
    "requst": {
        "command": "subscribe",
        "client": "viwer",
        "symlist": [
            "QQQ",
            "SPY"
        ]
    }
}

7. unsubscribe ALL symlist from streamer:
{
    "requst": {
        "command": "unsubscribe",
        "client": "viwer",
    }
}
NOTE: do we need empty the Q?

8.update ALL symlist from streamer:
{
    "requst": {
        "command": "update",
        "client": "viwer",
        "interval": "1s",
        "bar_mask":  0x111111,
	"ma_mask": 0x111111111
    }
}
NOTE:
a) interval must inside ["1s", "5s", "10s", "30s", "1m", "5m", "10m", "30m", "1h"].
b )bar_mask is a bitmap of 0 or 1 (only lowest 6 bits are used) representing mask of "average/open/close/high/low/volume".
c) ma_mask is a bitmap of 0 or 1 (only lowest 9 bits are used) representing the moving average of intervals (from 1s to 1h)
d) interval and bar_mask fields are mandatory when requesting for bar data; ma_mask field is mandatory when requesting moving average data.
e) viewer always keep send 'update' command every 1s unless 'unsubscribe', but 'interval' value can be 1s-1h
f) "bar", "ma" and "delay" fields might be optional, depending on the request.
g)  when requesting bar data only, caller should send this message with the same interval as the bar interval

9. data response from streamer:
{
    "response":{
	"client": "strategy1"
       	"timestamp": "hhmmss",
	"interval": "1s",
       	"data": [
		{
			"symbol": "QQQ",
			"bar": "12.21,12.20,12.24,12.00,12.13,200",
			"ma":"aveprice:avevol,aveprice:avevol,aveprice:avevol", //comma separated 
			"delay": "hhmmss-price-vol;yymmss-price-vol", //comma seperated
		}
	]
    }
}

10. status response from streamer:
{
    "response":{
       "errcode":0
    }
}
or
{
    "response":{
       "errcode": "-1",
       "errmsg": "xxxxx"
    }
}

### With feeder ###
11. subscribe new symlist from streamer:

{
    "requst": {
        "command": "subscribe",
        "client": "viwer",
        "symlist": [
            "QQQ",
            "SPY"
        ]
	"start": " "
	"stop": " "
    }
}

NOTE: 
a)feeder will send all data in symlist to viewer, periode defined by 'start' and 'stop'. Viewer will decide what to show.


9. data response from feeder:
{
    "response":{
	"client": "viewer"
       	"start": " "
	"stop": " "
       	"data": [
		{
			"symbol": "QQQ",
			"bar": "12.21,12.20,12.24,12.00,12.13,200",
			"ma":"aveprice:avevol,aveprice:avevol,aveprice:avevol", //comma separated 
			"interval": "1d",
		}
	]
    }
}

10. status response from feeder:
{
    "response":{
       "errcode":0
    }
}
or
{
    "response":{
       "errcode": "-1",
       "errmsg": "xxxxx"
    }
}




=========Major technique issues=========
1. memory not enough if too many stock in Q ->
opt1: limit both Q size and time size. only memory stock's recent 1 hour data, ealier's store in file
opt2: ony stream on plotting stock, when re-show hiden stock data, call streamer or feeder to ask for same-day-historical data

follow-up: need specify plot span based on interval, eg: span=1h if interval=1s.  Monitor resoluation has limitation!!

!
2. re-show data from file('move' command),how to combine updating with streaming data ->
opt1: show 'same day historical' data first, then keep updating data from streamer every 1s 

--follow up issue: fetcher can not real-time store 'same day historical data' in file, maybe store every hour. what if we request in middle of an hour? ->
opt1: fetcher should be able provide any start/stop time historical data

3. zoom-in,zoom-out. don't want re-plot after scale change ->
opt1: use replotting for zoom function
Liang's comment:zoom-in/out without replot is not useful feature. We want to replot it only because we want to see some detail of a given period, or we want to see extended time line, both require replotting


4. during real-time data ploting, need handle case that there is no data during some seconds from streamer->
opt1: plot should do nothing or use the previous price (depending on the bar type) until new data comes

!
5. case like:when stock A was only streaming bar data, in some time, we want show it's all previous MA data inside today, how to? ->
opt1: for any real-time stock data, should always request "whole set" data from streammer, incluse bar/MA,etc. viewer can decide which data to show. 
opt2: During grab "same today historical data", feeder/streamer should always grap "whole set" data. then viewer will ask "missing data" from ""same today historical data"
follow-up: request freq is decided by interval: when have bar data, use bar data interval; when only have MA data, use min interval of MA data. 

6. when requesting bar data only, caller should send this message with the same interval as the bar interval. 
Due to clock drift, the caller might get same bar data via two consecutive messages. In this case, the caller need to resend the second message immediately and adjust its timer.   
-> viewer need to check if the data received this time is same as last one.
 
